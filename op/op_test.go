package op

import (
	"fmt"
	"github.com/mikeatacme/geom"
	"github.com/mikeatacme/geom/carto"
	"image/color"
	"math"
	"math/rand"
	"os"
	"testing"
	"time"
)

var shape1, shape2 geom.Geom

func init() {
	shape1 = geom.Polygon{{geom.Point{0, 0}, geom.Point{1, 0},
		geom.Point{1, 1}, geom.Point{0, 1}, geom.Point{0, 0}}}
	shape2 = geom.Polygon{{geom.Point{.25, .25},
		geom.Point{.75, .25}, geom.Point{.75, .75}, geom.Point{.25, .75},
		geom.Point{.25, .25}}}
}

func TestArea(t *testing.T) {
	a := Area(shape1)
	if different(a, 1.) {
		t.Log(a)
		t.Fail()
	}
	a = Area(shape2)
	if different(a, 0.25) {
		t.Log(a)
		t.Fail()
	}
}

func TestDifference(t *testing.T) {
	FixOrientation(shape1)
	FixOrientation(shape2)
	shape, err := Construct(shape1, shape2, DIFFERENCE)
	handle(err)
	t.Log(shape)
	a := Area(shape)
	if different(a, 0.75) {
		t.Log(a)
		t.Fail()
	}
	drawShapes(shape2, shape1, shape, "difference.png")
}

func TestUnion(t *testing.T) {
	shape, err := Construct(shape1, shape2, UNION)
	handle(err)
	t.Log(shape)
	a := Area(shape)
	if different(a, 1.) {
		t.Log(a)
		t.Fail()
	}
	drawShapes(shape2, shape1, shape, "union.png")
}

func TestIntersection(t *testing.T) {
	shape, err := Construct(shape1, shape2, INTERSECTION)
	handle(err)
	t.Log(shape)
	a := Area(shape)
	if different(a, 0.25) {
		t.Log(a)
		t.Fail()
	}
	drawShapes(shape2, shape1, shape, "intersection.png")
}

func TestXor(t *testing.T) {
	shape, err := Construct(shape1, shape2, XOR)
	handle(err)
	t.Log(shape)
	a := Area(shape)
	if different(a, 0.75) {
		t.Log(a)
		t.Fail()
	}
	drawShapes(shape2, shape1, shape, "xor.png")
}

func TestDifficultShapes1(t *testing.T) {
	difficultShapeA := geom.Geom(geom.Polygon{{
		{-949.9671190511435, -776530.876383242}, {-971.3149450758938, -776530.876383242},
		{-987.3186852218928, -776530.876383242}, {-971.3143310546875, -776530.9375},
		{-949.9663696289062, -776530.9375}, {-932.567192575676, -776530.876383242}},
		{{-400.82663417423987, -776530.9375}, {-914.386962890625, -776530.9375},
			{-931.7797537201152, -776530.876383242}, {-914.3856589011848, -776530.876383242}},
		{{1847.9894266200718, -776543.8761907278}, {1828.7784833281767, -776543.4981672468},
			{1449.5499414053597, -776539.7180058745}, {1828.78173828125, -776543.5625},
			{1847.9920654296875, -776543.9375}, {1870.3248060378032, -776543.8761907278}},
		{{1892.1079170496669, -776544.3119677962}, {1871.1446207564968, -776543.8840402034},
			{1892.11181640625, -776544.375}, {1906.2987491577942, -776544.5347901696}},
		{{2237.068105247765, -776547.7454548368}, {2225.847412109375, -776547.625},
			{2225.844897193834, -776547.6249235813}}})

	difficultShapeB := geom.Geom(geom.Polygon{{
		{-4000, -780000}, {-4000, -776000}, {0, -776000}, {0, -780000}, {-4000, -780000}}})
	FixOrientation(difficultShapeA)
	FixOrientation(difficultShapeB)

	solution, err := Construct(difficultShapeA, difficultShapeB, INTERSECTION)
	handle(err)
	drawShapes(difficultShapeA, difficultShapeB, solution, "DifficultShapes1.png")
	t.Log(Area(solution))
}

func TestDifficultShapes2(t *testing.T) {
	shape := geom.Geom(geom.Polygon{
		{{1.825033375e+06, -277681.0625}, {1.824031125e+06, -277704.15625},
			{1.823029e+06, -277727.21875}, {1.82202675e+06, -277750.28125},
			{1.822009375e+06, -276760.3125}, {1.8230115e+06, -276737.25},
			{1.822994e+06, -275747.28125}, {1.821991875e+06, -275770.34375},
			{1.821974375e+06, -274780.4375}, {1.822976625e+06, -274757.34375},
			{1.82397875e+06, -274734.28125}, {1.82396125e+06, -273744.34375},
			{1.822959125e+06, -273767.4375}, {1.822941625e+06, -272777.53125},
			{1.822924125e+06, -271787.625}, {1.822906625e+06, -270797.75},
			{1.823908875e+06, -270774.65625}, {1.823891375e+06, -269784.78125},
			{1.8248935e+06, -269761.6875}, {1.824911e+06, -270751.5625},
			{1.825913125e+06, -270728.46875}, {1.825930625e+06, -271718.34375},
			{1.82693275e+06, -271695.25}, {1.82691525e+06, -270705.34375},
			{1.82689775e+06, -269715.46875}, {1.826880375e+06, -268725.59375},
			{1.825878125e+06, -268748.71875}, {1.82587775e+06, -268727.3125},
			{1.8264545e+06, -268620.5625}, {1.826543375e+06, -268605.375},
			{1.82657925e+06, -268598.875}, {1.827439125e+06, -268449.4375},
			{1.82787675e+06, -268378.90625}, {1.8278825e+06, -268702.46875},
			{1.8279e+06, -269692.34375}, {1.828902125e+06, -269669.21875},
			{1.828919625e+06, -270659.09375}, {1.82992175e+06, -270635.96875},
			{1.82993925e+06, -271625.875}, {1.830941375e+06, -271602.75},
			{1.831943625e+06, -271579.59375}, {1.831961125e+06, -272569.53125},
			{1.83296325e+06, -272546.375}, {1.83298075e+06, -273536.34375},
			{1.83299825e+06, -274526.28125}, {1.83301575e+06, -275516.28125},
			{1.83303325e+06, -276506.25}, {1.833050875e+06, -277496.25},
			{1.834053e+06, -277473.125}, {1.83505525e+06, -277450},
			{1.835037625e+06, -276460}, {1.835020125e+06, -275470},
			{1.83602225e+06, -275446.84375}, {1.83600475e+06, -274456.84375},
			{1.837007e+06, -274433.6875}, {1.838009125e+06, -274410.53125},
			{1.83901125e+06, -274387.375}, {1.8400135e+06, -274364.1875},
			{1.841015625e+06, -274341}, {1.84201775e+06, -274317.8125},
			{1.84302e+06, -274294.625}, {1.8430375e+06, -275284.625},
			{1.842035375e+06, -275307.8125}, {1.842052875e+06, -276297.84375},
			{1.84105075e+06, -276321.03125}, {1.84106825e+06, -277311.0625},
			{1.841085875e+06, -278301.125}, {1.841103375e+06, -279291.1875},
			{1.841121e+06, -280281.28125}, {1.84011875e+06, -280304.4375},
			{1.840136375e+06, -281294.53125}, {1.839134125e+06, -281317.6875},
			{1.839116625e+06, -280327.59375}, {1.839099e+06, -279337.5},
			{1.8390815e+06, -278347.4375}, {1.839063875e+06, -277357.40625},
			{1.83806175e+06, -277380.5625}, {1.83807925e+06, -278370.59375},
			{1.837077125e+06, -278393.75}, {1.836074875e+06, -278416.90625},
			{1.8360925e+06, -279406.9375}, {1.83509025e+06, -279430.0625},
			{1.83510775e+06, -280420.125}, {1.83611e+06, -280397},
			{1.8361275e+06, -281387.09375}, {1.835125375e+06, -281410.21875},
			{1.834123125e+06, -281433.34375}, {1.833121e+06, -281456.4375},
			{1.833103375e+06, -280466.375}, {1.834105625e+06, -280443.25},
			{1.834088125e+06, -279453.1875}, {1.833085875e+06, -279476.3125},
			{1.833068375e+06, -278486.28125}, {1.832066125e+06, -278509.40625},
			{1.83208375e+06, -279499.4375}, {1.8310815e+06, -279522.53125},
			{1.831099e+06, -280512.59375}, {1.8311165e+06, -281502.65625},
			{1.830114375e+06, -281525.75}, {1.830096875e+06, -280535.6875},
			{1.83007925e+06, -279545.65625}, {1.83006175e+06, -278555.625},
			{1.829059625e+06, -278578.71875}, {1.829042125e+06, -277588.71875},
			{1.828039875e+06, -277611.8125}, {1.828057375e+06, -278601.8125},
			{1.828074875e+06, -279591.84375}, {1.82707275e+06, -279614.90625},
			{1.82705525e+06, -278624.90625}, {1.826053e+06, -278648},
			{1.825050875e+06, -278671.0625}, {1.825033375e+06, -277681.0625}},
		{{1.82396125e+06, -273744.34375}, {1.824963375e+06, -273721.25},
			{1.824946e+06, -272731.34375}, {1.8249285e+06, -271741.4375},
			{1.82392625e+06, -271764.53125}, {1.82394375e+06, -272754.4375},
			{1.82396125e+06, -273744.34375}},
		{{1.837042e+06, -276413.6875}, {1.836039875e+06, -276436.84375},
			{1.836057375e+06, -277426.875}, {1.837059625e+06, -277403.71875},
			{1.837042e+06, -276413.6875}},
		{{1.837042e+06, -276413.6875}, {1.83804425e+06, -276390.53125},
			{1.838026625e+06, -275400.53125}, {1.8370245e+06, -275423.6875},
			{1.837042e+06, -276413.6875}},
		{{1.825033375e+06, -277681.0625}, {1.8260355e+06, -277658},
			{1.826018e+06, -276668}, {1.825015875e+06, -276691.09375},
			{1.825033375e+06, -277681.0625}},
		{{1.82993925e+06, -271625.875}, {1.828937125e+06, -271649},
			{1.828954625e+06, -272638.90625}, {1.82995675e+06, -272615.78125},
			{1.82993925e+06, -271625.875}},
		{{1.828004875e+06, -275631.84375}, {1.827987375e+06, -274641.90625},
			{1.827969875e+06, -273651.96875}, {1.82696775e+06, -273675.0625},
			{1.82698525e+06, -274665}, {1.82700275e+06, -275654.96875},
			{1.828004875e+06, -275631.84375}},
		{{1.8260005e+06, -275678.03125}, {1.825983125e+06, -274688.09375},
			{1.824980875e+06, -274711.1875}, {1.824998375e+06, -275701.125},
			{1.8260005e+06, -275678.03125}},
		{{1.832031125e+06, -276529.375}, {1.832013625e+06, -275539.40625},
			{1.831011375e+06, -275562.53125}, {1.83000925e+06, -275585.625},
			{1.83002675e+06, -276575.625}, {1.831029e+06, -276552.5},
			{1.832031125e+06, -276529.375}}})

	b := shape.Bounds()
	bounds := geom.Geom(geom.Polygon{{
		{b.Min.X, b.Min.Y}, {b.Max.X, b.Min.Y}, {b.Max.X, b.Max.Y},
		{b.Min.X, b.Max.Y}, {b.Min.X, b.Min.Y}}})
	FixOrientation(shape)
	FixOrientation(bounds)
	intersection, err := Construct(shape, bounds, INTERSECTION)
	handle(err)
	if different(Area(intersection), Area(shape)) {
		t.Fail()
		t.Log(Area(intersection), Area(shape))
	}
	drawShapes(bounds, shape, intersection, "DifficultShapes2.png")
}

func TestDifficultShapes4(t *testing.T) {
	a := geom.Geom(geom.Polygon{
		{{-1.05479925e+06, 357453.593}, {-1.05279975e+06, 357459.593}, {-1.05280525e+06, 358450.906}, {-1.0518055e+06, 358453.906}, {-1.051811e+06, 359445.25}, {-1.0518165e+06, 360436.593}, {-1.051822e+06, 361427.968}, {-1.052821875e+06, 361424.937}, {-1.05281625e+06, 360433.562}, {-1.05281075e+06, 359442.218}, {-1.053810625e+06, 359439.218}, {-1.054810375e+06, 359436.218}, {-1.054815875e+06, 360427.562}, {-1.055815625e+06, 360424.562}, {-1.0568155e+06, 360421.562}, {-1.05681e+06, 359430.218}, {-1.055810125e+06, 359433.218}, {-1.055804625e+06, 358441.906}, {-1.054804875e+06, 358444.906}, {-1.05479925e+06, 357453.593}}})
	b := geom.Geom(geom.Polygon{
		{{-1.08e+06, 324000}, {-1.08e+06, 360000}, {-1.044e+06, 360000}, {-1.044e+06, 324000}, {-1.08e+06, 324000}}})

	FixOrientation(a)
	FixOrientation(b)

	intersection, err := Construct(a, b, INTERSECTION)
	handle(err)
	diff, err := Construct(a, b, DIFFERENCE)
	handle(err)
	if different(Area(a), Area(intersection)+Area(diff)) {
		t.Fail()
		t.Log(Area(a), Area(intersection)+Area(diff))
	}
	drawShapes(b, a, intersection, "DifficultShapes4.png")
	drawShapes(b, a, diff, "DifficultShapes4diff.png")
}

// This test, where 2 points are almost exactly the same, doesn't
// end up working correctly (The result is empty but it should
// contain the entire shape a).
func TestDifficultShapes5(t *testing.T) {
	a := geom.Geom(geom.Polygon{
		{{0, 0}, {1, 0}, {0.5, 0.5}, {1, 1}, {0, 1}, {0, 0}}})
	b := geom.Geom(geom.Polygon{
		{{1, 0}, {1, 1}, {0.5, 0.5 * (1 + 1e-10)}, {1, 0}}})

	FixOrientation(a)
	FixOrientation(b)

	intersection, err := Construct(a, b, INTERSECTION)
	handle(err)
	diff, err := Construct(a, b, DIFFERENCE)
	handle(err)
	drawShapes(b, a, intersection, "DifficultShapes5.png")
	drawShapes(b, a, diff, "DifficultShapes5diff.png")
}

var spiral = geom.Geom(geom.LineString{
	{158.69048, 156.42586}, {144.01645, 156.42586}, {139.1901, 161.57183},
	{139.1901, 169.9358}, {139.1901, 180.95427}, {150.53931, 194.58874},
	{169.42641, 194.58874}, {194.23167, 192.66117}, {210.35714, 175.22916},
	{210.35714, 147.61905}, {210.35714, 139.5671}, {202.97619, 92.261905},
	{151.64502, 92.261905}, {100.31385, 92.261905}, {84.545455, 139.9026},
	{84.545455, 163.72294}, {84.545455, 187.54329}, {106.35281, 238.87446},
	{162.38095, 238.87446}, {218.40909, 238.87446}, {248.2684, 188.54978},
	{248.2684, 150.63853}, {248.2684, 112.72727}, {216.3961, 58.376623},
	{153.65801, 58.376623}, {90.919913, 58.376623}, {54.015152, 113.39827},
	{54.015152, 160.36797}, {54.015152, 207.33766}, {92.597403, 267.05628},
	{162.38095, 267.05628}, {232.1645, 267.05628}, {274.77273, 201.6342},
	{274.77273, 152.31602}, {274.77273, 102.99784}, {233.171, 34.220779},
	{154.6645, 34.220779}, {76.158009, 34.220779}, {30.194805, 103.66883},
	{30.194805, 159.69697}, {30.194805, 215.72511}, {76.829004, 288.52814},
	{163.38745, 288.52814}, {249.94589, 288.52814}, {295.90909, 210.35714},
	{295.90909, 151.64502}, {295.90909, 92.9329}, {243.90693, 13.084415},
	{155.3355, 13.084415}, {119.40098, 13.084415}, {97.739911, 26.744043},
	{97.739911, 26.744043}})

func TestLine(t *testing.T) {
	shape := geom.Geom(geom.Polygon{
		{{0, 0}, {0, 200}, {200, 200}, {200, 0}, {0, 0}}})
	FixOrientation(shape)

	intersection, err := Construct(spiral, shape, INTERSECTION)
	handle(err)
	drawLine(spiral, shape, intersection, "line.png")
}

func TestLines(t *testing.T) {
	line := geom.Geom(geom.LineString{
		{0, 0}, {200, 200}, {100, 200}, {300, 330}, {100, 50}})

	intersection, err := Construct(spiral, line, INTERSECTION)
	handle(err)
	drawLines(spiral, line, intersection, "lines.png")
}

// The clipper doesn't work will if a shape is made up of only two points.
// To get around this problem, if there are only 2 points, we add a third
// one a small distance from the second point.
func TestDifficultLine1(t *testing.T) {
	line := geom.Geom(geom.MultiLineString{{
		{0, 1}, {2, 1.1}}})

	shape := geom.Geom(geom.Polygon{
		{{1, 0}, {2, 0}, {2, 2}, {1, 2}, {1, 0}}})

	intersection, err := Construct(line, shape, INTERSECTION)
	handle(err)
	drawLine(line, shape, intersection, "difficultLine1.png")
}

func TestDifficultLine2(t *testing.T) {
	line := geom.Geom(geom.MultiLineString{
		{{1990.0286865234375, 479215.03125},
			{1943.354248046875, 479215.03125},
			{888.0219116210938, 479254.625}}})

	shape := geom.Geom(geom.Polygon{
		{{0, 468000}, {36000, 468000}, {36000, 504000}, {0, 504000},
			{0, 468000}}})

	drawLine(line, shape, nil, "difficultLine2.png")
	intersection, err := Construct(line, shape, INTERSECTION)
	handle(err)
	drawLine(line, shape, intersection, "difficultLine2.png")
}

func TestDifficultLine4(t *testing.T) {
	line := geom.Geom(geom.MultiLineString{
		{{1.996889625e+06, 443289.9375}, {1.99685025e+06, 443318.53125}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.996842875e+06, 443323.9375}, {1.9968197232187183e+06, 443337.1989592995}, {1.9967845e+06, 443357.375}, {1.9967391211110454e+06, 443391.6950416795}, {1.99669025e+06, 443428.65625}, {1.996620125e+06, 443478.5625}, {1.99650475e+06, 443550.15625}, {1.996620125e+06, 443478.5625}, {1.99669025e+06, 443428.65625}, {1.9967391211110454e+06, 443391.6950416795}, {1.9967845e+06, 443357.375}, {1.9968197232187183e+06, 443337.1989592995}, {1.996842875e+06, 443323.9375}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.996842875e+06, 443323.9375}, {1.9968197232187183e+06, 443337.1989592995}, {1.9967845e+06, 443357.375}, {1.9967391211110454e+06, 443391.6950416795}, {1.99669025e+06, 443428.65625}, {1.996620125e+06, 443478.5625}, {1.99650475e+06, 443550.15625}, {1.996620125e+06, 443478.5625}, {1.99669025e+06, 443428.65625}, {1.9967391211110454e+06, 443391.6950416795}, {1.9967845e+06, 443357.375}, {1.9968197232187183e+06, 443337.1989592995}, {1.996842875e+06, 443323.9375}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.996842875e+06, 443323.9375}, {1.9968197232187183e+06, 443337.1989592995}, {1.9967845e+06, 443357.375}, {1.9967391211110454e+06, 443391.6950416795}, {1.99669025e+06, 443428.65625}, {1.996620125e+06, 443478.5625}, {1.99650475e+06, 443550.15625}, {1.996620125e+06, 443478.5625}, {1.99669025e+06, 443428.65625}, {1.9967391211110454e+06, 443391.6950416795}, {1.9967845e+06, 443357.375}, {1.9968197232187183e+06, 443337.1989592995}, {1.996842875e+06, 443323.9375}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.99685025e+06, 443318.53125}, {1.996842875e+06, 443323.9375}, {1.996842875e+06, 443323.9375}, {1.9968197232187183e+06, 443337.1989592995}, {1.9967845e+06, 443357.375}, {1.9967391211110454e+06, 443391.6950416795}, {1.99669025e+06, 443428.65625}, {1.996620125e+06, 443478.5625}, {1.99650475e+06, 443550.15625}}})

	shape := geom.Geom(geom.Polygon{
		{{1.992e+06, 432000}, {2.004e+06, 432000}, {2.004e+06, 444000}, {1.992e+06, 444000}, {1.992e+06, 432000}}})

	//drawLine(line, shape, nil, "difficultLine4.png")
	drawLine(line, nil, nil, "difficultLine4.png")
	intersection, err := Construct(line, shape, INTERSECTION)
	handle(err)
	drawLine(line, shape, intersection, "difficultLine4.png")
}

func TestPointOnSurface(t *testing.T) {
	blockGroup := geom.Geom(geom.Polygon{
		{{1.4666686659213295e+06, 456356.6099318844},
			{1.466640272395703e+06, 456308.3459849271},
			{1.466631568797793e+06, 456297.6509224567},
			{1.4666215211638892e+06, 456288.2669231394},
			{1.4666103684787494e+06, 456280.2420943313},
			{1.466597096762559e+06, 456273.2580827649},
			{1.4665856965381894e+06, 456268.9145721526},
			{1.4665739170279969e+06, 456265.62487101514},
			{1.4665514323694592e+06, 456261.5246085302},
			{1.4665356043381225e+06, 456259.78983511345},
			{1.4665222085062817e+06, 456259.565139994},
			{1.4665173575832224e+06, 456260.1659218906},
			{1.466509538310543e+06, 456262.31412301515},
			{1.4664906646069933e+06, 456270.70437723905},
			{1.4664785439348419e+06, 456274.01700108167},
			{1.4664309152196427e+06, 456236.3326545436},
			{1.466429736025204e+06, 456241.7474160909},
			{1.4663202615287988e+06, 456218.566917099},
			{1.4660796155063089e+06, 456168.72396337334},
			{1.46606288203995e+06, 456249.3473039248},
			{1.4660460826555148e+06, 456330.2964707289},
			{1.4660297944068674e+06, 456409.54004944145},
			{1.4660114258765306e+06, 456501.9310048863},
			{1.4659937717471032e+06, 456589.1524314042},
			{1.4659761918606102e+06, 456669.0393289355},
			{1.4659658231012307e+06, 456716.57808545534},
			{1.4659589004564488e+06, 456749.5502070106},
			{1.4661616544806196e+06, 456792.6267038562},
			{1.4663283070409088e+06, 456827.1565202},
			{1.4663323512488294e+06, 456792.01875533996},
			{1.4663381137017023e+06, 456743.88659045065},
			{1.4663454592867503e+06, 456691.2129327349},
			{1.4663490029118974e+06, 456662.6451887471},
			{1.4663537451494734e+06, 456626.5180842191},
			{1.4663584433504166e+06, 456587.3293199929},
			{1.4663602905876539e+06, 456578.2053576165},
			{1.4663767476878276e+06, 456496.508296879},
			{1.466419821817874e+06, 456505.4551775475},
			{1.4665152246850838e+06, 456447.31795015535},
			{1.4665523753149293e+06, 456424.876266902},
			{1.4665890452321696e+06, 456403.58127909165},
			{1.4666686659213295e+06, 456356.6099318844}},
		{{1.466911849343087e+06, 455860.0625510622},
			{1.466909627616252e+06, 455871.03269493417},
			{1.4668575052173217e+06, 456128.0028743665},
			{1.466829988329143e+06, 456260.60316453734},
			{1.4667418626572134e+06, 456702.7312659317},
			{1.4666850714591227e+06, 456978.65895181696},
			{1.4666772132794003e+06, 457016.64273566456},
			{1.4665936058940946e+06, 457422.94090994995},
			{1.4665883757869902e+06, 457452.86353684176},
			{1.4665829257649533e+06, 457483.8724941122},
			{1.4665291262218133e+06, 457476.7090760335},
			{1.4662432674070396e+06, 457438.9541352737},
			{1.4661053615387587e+06, 457410.0169461265},
			{1.4660840263358692e+06, 457405.5847262714},
			{1.4660627929548884e+06, 457401.0600567631},
			{1.466036225633738e+06, 457396.24721636606},
			{1.465994189995644e+06, 457388.75569015066},
			{1.46597003527943e+06, 457384.31843209645},
			{1.465929934191148e+06, 457377.1055843952},
			{1.4659009541442827e+06, 457371.91799222474},
			{1.4658630842413274e+06, 457365.15724981227},
			{1.4658221861091182e+06, 457357.78377067775},
			{1.4657900980329334e+06, 457351.9676145672},
			{1.4657226900039318e+06, 457339.90748577943},
			{1.4656784446537488e+06, 457331.8574524459},
			{1.4656513770078977e+06, 457327.0579489617},
			{1.4655765355807573e+06, 457313.6080806776},
			{1.4654679319732352e+06, 457294.0055013841},
			{1.4654257363682357e+06, 457286.48483968707},
			{1.4651860826934832e+06, 457243.4232445815},
			{1.464946369855836e+06, 457200.2446446309},
			{1.4649540979396324e+06, 457182.1341216394},
			{1.4649834247961114e+06, 457133.11555370473},
			{1.4650124445030268e+06, 457088.89676709345},
			{1.4650456148663473e+06, 457052.8672292645},
			{1.465080928466676e+06, 457011.1655507352},
			{1.4651235977038846e+06, 456956.4794088207},
			{1.4651512099056963e+06, 456923.7353209695},
			{1.465170792007844e+06, 456887.2186190103},
			{1.4652044629238981e+06, 456841.340759275},
			{1.465244229315922e+06, 456792.3996676979},
			{1.465275789259824e+06, 456764.7511240327},
			{1.4652917706972244e+06, 456744.80550662335},
			{1.4653002565937594e+06, 456738.9467717214},
			{1.4653092345309334e+06, 456736.8057492127},
			{1.465329367472431e+06, 456734.8864740572},
			{1.4654534566730952e+06, 456750.15610918833},
			{1.4654988211798912e+06, 456758.4304469573},
			{1.4655124713449855e+06, 456757.8005143066},
			{1.4655253875476585e+06, 456754.64746213396},
			{1.4655553059264563e+06, 456735.93941133237},
			{1.4655613790041201e+06, 456729.7057294317},
			{1.4655764156358002e+06, 456704.5944972371},
			{1.46559859608565e+06, 456647.4603147727},
			{1.4656207107080047e+06, 456593.9312654618},
			{1.4656423777184798e+06, 456539.74630633916},
			{1.4656562770050243e+06, 456514.5180118352},
			{1.4656631359016262e+06, 456500.3024953582},
			{1.4656745518643076e+06, 456493.90635576926},
			{1.4656790309984297e+06, 456484.0712447649},
			{1.4656814876255414e+06, 456477.6712010415},
			{1.4656951819039707e+06, 456470.2662972743},
			{1.4657105713352624e+06, 456453.25434758794},
			{1.465730676271155e+06, 456421.1409806689},
			{1.4657624303534937e+06, 456368.7714070861},
			{1.4657989749678809e+06, 456313.64001230546},
			{1.4658351818390486e+06, 456254.03083454777},
			{1.4658646116127712e+06, 456197.57306253037},
			{1.4658804925458948e+06, 456154.76813590515},
			{1.4658934470826483e+06, 456124.37391390715},
			{1.465904759209205e+06, 456112.75593397464},
			{1.4659110385257336e+06, 456095.2573922407},
			{1.4659101581546676e+06, 456076.64904515963},
			{1.4659064319953113e+06, 456036.43424084253},
			{1.4659167015094855e+06, 456007.41877187986},
			{1.465931498069894e+06, 455983.5030669088},
			{1.4659517285604877e+06, 455964.30533679103},
			{1.465961118895872e+06, 455936.3557098776},
			{1.4659656081829239e+06, 455901.87402757164},
			{1.4659742940416434e+06, 455857.7262123379},
			{1.4659996546272866e+06, 455749.22548627126},
			{1.4660081274564718e+06, 455682.76025817223},
			{1.4660189480855758e+06, 455623.55439055077},
			{1.4660371258971156e+06, 455551.3648637898},
			{1.4660531544003552e+06, 455480.77563343267},
			{1.466058864179805e+06, 455448.4632128414},
			{1.466065346513366e+06, 455420.9428057777},
			{1.466071347057489e+06, 455381.4529131167},
			{1.4660796074178496e+06, 455346.377736295},
			{1.466080164571778e+06, 455292.783538518},
			{1.4660792396279222e+06, 455233.8014279942},
			{1.4660819529570607e+06, 455165.0404451354},
			{1.4660828841539659e+06, 455119.4366060284},
			{1.4660660661171584e+06, 455009.4110628321},
			{1.4660674745121999e+06, 454988.10033089},
			{1.46604953571468e+06, 454958.23857529194},
			{1.4660394692856267e+06, 454956.31452598516},
			{1.4660127283797693e+06, 454953.9559238542},
			{1.4660084502207565e+06, 454943.93179436453},
			{1.4660078041432884e+06, 454913.4991451424},
			{1.466006180518329e+06, 454868.62251474056},
			{1.4659961275743488e+06, 454839.5654109441},
			{1.465986904650298e+06, 454808.8671843304},
			{1.4659780030297716e+06, 454776.9903765191},
			{1.4659688607110402e+06, 454756.14525229216},
			{1.4659433643965449e+06, 454730.40812704636},
			{1.4659263350691095e+06, 454708.7586193506},
			{1.4658948951378225e+06, 454682.04522043804},
			{1.4658701028549718e+06, 454662.6695375741},
			{1.4658515402668267e+06, 454649.4162298659},
			{1.4658416785718305e+06, 454639.506372658},
			{1.465801344371115e+06, 454587.02399122174},
			{1.4657855975056705e+06, 454561.90339715214},
			{1.4657630925133987e+06, 454529.98854298587},
			{1.4657459267328011e+06, 454486.03839117725},
			{1.4657343913279315e+06, 454464.7096807769},
			{1.4657280001689917e+06, 454448.7182715391},
			{1.4657242490659994e+06, 454439.36643421574},
			{1.4657125071509364e+06, 454416.1870455395},
			{1.4656983084641704e+06, 454399.40768672165},
			{1.465688760919183e+06, 454380.96877113235},
			{1.4656826539793103e+06, 454357.0073453573},
			{1.4656757103836776e+06, 454327.3364590098},
			{1.465676375997978e+06, 454313.7904092121},
			{1.4656754758940397e+06, 454307.16355954704},
			{1.4656712510035075e+06, 454277.59045251977},
			{1.4656692594830166e+06, 454255.0269981624},
			{1.465657406985061e+06, 454232.3907994352},
			{1.4656463843028399e+06, 454208.1134862627},
			{1.465625203126827e+06, 454151.5932523438},
			{1.4656130877963523e+06, 454093.7410504229},
			{1.4656033914963903e+06, 454022.69773166464},
			{1.465586694184923e+06, 453946.05501431384},
			{1.4655807797796072e+06, 453941.24057383527},
			{1.4655688561913269e+06, 453939.0549815956},
			{1.4655640931098242e+06, 453931.4207519617},
			{1.4655576086736242e+06, 453896.19016039313},
			{1.465548618069238e+06, 453841.34488737164},
			{1.4655341110679687e+06, 453792.8461987555},
			{1.4655248707832156e+06, 453779.4447858473},
			{1.4655193076189612e+06, 453772.8925318406},
			{1.4654996726417255e+06, 453772.3130563841},
			{1.4654865528305112e+06, 453769.88552708924},
			{1.4654842593617595e+06, 453767.2735327318},
			{1.4654824719781335e+06, 453765.44222358277},
			{1.465487928179518e+06, 453749.13402737014},
			{1.4654893709809321e+06, 453734.6146563897},
			{1.4654821905843155e+06, 453713.48942463595},
			{1.4654766769961833e+06, 453659.9131642783},
			{1.4654736516744525e+06, 453620.29465673974},
			{1.465471770908275e+06, 453595.9450574507},
			{1.4654569709415268e+06, 453559.1460277846},
			{1.4654357807229783e+06, 453530.5519716138},
			{1.465420584084233e+06, 453492.42928989825},
			{1.4654047201724343e+06, 453458.01585863624},
			{1.4653883425890803e+06, 453426.55119404866},
			{1.46535233372397e+06, 453380.9410366623},
			{1.4653136989177917e+06, 453346.6717519836},
			{1.4652724822224828e+06, 453312.44598265097},
			{1.4652308588463822e+06, 453270.7891955939},
			{1.4652212308447594e+06, 453262.17165699374},
			{1.4652459278495305e+06, 453221.71499108005},
			{1.4652528601283566e+06, 453225.60402689216},
			{1.4653377017731897e+06, 453279.2792293507},
			{1.465403663151942e+06, 453170.6248038189},
			{1.465472102681706e+06, 453059.984479875},
			{1.465490532184391e+06, 453028.7755406901},
			{1.4655059857904557e+06, 453013.923999226},
			{1.4655182362277522e+06, 453009.1656360227},
			{1.465542758409167e+06, 453007.3412962464},
			{1.4655448424780143e+06, 452976.1055456982},
			{1.4655533229893974e+06, 452948.5377199235},
			{1.465568322648021e+06, 452921.15766358696},
			{1.4656468485773362e+06, 452812.78459731553},
			{1.4656733394326342e+06, 452776.1964893417},
			{1.4662786071216622e+06, 453608.9107143928},
			{1.4663628880607337e+06, 453724.7855204236},
			{1.4662677381681858e+06, 453706.0953997064},
			{1.4662068591051814e+06, 453694.00215768866},
			{1.4661305476035182e+06, 453679.0128972289},
			{1.465921988047848e+06, 453637.9460731072},
			{1.4658798059180253e+06, 453638.45730023447},
			{1.46579860699503e+06, 453644.7563978305},
			{1.465825443237848e+06, 453720.5109681667},
			{1.4658467422337055e+06, 453783.83929267194},
			{1.4658657161307605e+06, 453838.55667732825},
			{1.4658922836778518e+06, 453817.5876722204},
			{1.465914625841712e+06, 453845.39903889195},
			{1.4659155364961915e+06, 453882.329215494},
			{1.4659024348045173e+06, 453920.8339881666},
			{1.4659333955103082e+06, 453985.2130701424},
			{1.465957576685035e+06, 454035.10537281475},
			{1.466016608190053e+06, 454143.267657062},
			{1.4660659028141447e+06, 454228.99583050335},
			{1.466147537111093e+06, 454372.26175321295},
			{1.4661826665315086e+06, 454444.72290093766},
			{1.4662049330631343e+06, 454496.2646980533},
			{1.4662247575945095e+06, 454540.1891217804},
			{1.4662354775459003e+06, 454558.9793884519},
			{1.4662840846958612e+06, 454654.63440873346},
			{1.4663088783075162e+06, 454740.8344118702},
			{1.4663945993059452e+06, 454912.63477675134},
			{1.4664576169142246e+06, 455043.65963805973},
			{1.466481775236829e+06, 455099.76973337255},
			{1.4665231802305155e+06, 455209.23461044556},
			{1.4665485718028669e+06, 455317.04116531106},
			{1.4665496908378638e+06, 455355.3718846017},
			{1.4665488114841888e+06, 455412.1805171758},
			{1.4665451831932212e+06, 455459.61339145567},
			{1.466543616562439e+06, 455479.6485477705},
			{1.4665314809638732e+06, 455558.0360108623},
			{1.4665269839649429e+06, 455598.28278289875},
			{1.4665171847649827e+06, 455662.6704834764},
			{1.466528954260417e+06, 455664.37483101443},
			{1.466533511480068e+06, 455665.6366834089},
			{1.4665444729687865e+06, 455668.873514008},
			{1.466563570197357e+06, 455684.38599129865},
			{1.4665783602368522e+06, 455700.27038102475},
			{1.4665837089573662e+06, 455710.7380112191},
			{1.4665891918132268e+06, 455735.70575102617},
			{1.4665893206329911e+06, 455755.97129122535},
			{1.466586881957881e+06, 455786.45865588024},
			{1.4665834704483508e+06, 455811.09546746186},
			{1.4665770984925237e+06, 455840.1080086317},
			{1.4665705480840474e+06, 455864.67481360835},
			{1.466582678114196e+06, 455841.2377347891},
			{1.4665965312952783e+06, 455825.2730441195},
			{1.4666122918978343e+06, 455815.4609597995},
			{1.4666255703949784e+06, 455813.40051411843},
			{1.4666325105002031e+06, 455812.3181294352},
			{1.4666547522076156e+06, 455805.74063399347},
			{1.4667199179854032e+06, 455818.7092827637},
			{1.466911849343087e+06, 455860.0625510622}}})
	county := geom.Geom(geom.Polygon{
		{{1.4902934142170995e+06, 494389.19971794426},
			{1.4900452472900571e+06, 494269.9492884994},
			{1.4903031722511984e+06, 494142.16165892704},
			{1.4898231367394598e+06, 493544.7877729906},
			{1.4898111568189715e+06, 493802.6822627649},
			{1.4895023688089729e+06, 493976.57459794264},
			{1.488754806944437e+06, 493833.40059990983},
			{1.4884742479936453e+06, 493390.5567077665},
			{1.4882310020070334e+06, 493487.4763107523},
			{1.488106044331165e+06, 493291.8709631361},
			{1.487818167895762e+06, 493164.5100870765},
			{1.4876462949758791e+06, 493276.1843488099},
			{1.4869592016652147e+06, 493881.4713391864},
			{1.4869778201614686e+06, 494111.70845347823},
			{1.4868050389011544e+06, 494347.72715407796},
			{1.4864605163903793e+06, 494695.47056627873},
			{1.4861414646143557e+06, 494278.74480132863},
			{1.4861191925623252e+06, 493945.8848264996},
			{1.4863024052326975e+06, 493859.15953353595},
			{1.4859724685869734e+06, 493655.27823570673},
			{1.4856968075781162e+06, 493428.64781842363},
			{1.484996575668076e+06, 493216.39915917703},
			{1.4846663809423798e+06, 492933.3042177353},
			{1.4843344613430172e+06, 492898.887374552},
			{1.4842604540234748e+06, 493177.93298434187},
			{1.4837352726483722e+06, 493239.5623785852},
			{1.4836488849733113e+06, 493538.69905487995},
			{1.4840851988061476e+06, 493707.77895646036},
			{1.4839365839248823e+06, 494028.0564647909},
			{1.483612123054705e+06, 494198.9371383683},
			{1.4833124398887774e+06, 493888.22521294886},
			{1.4834128605151277e+06, 493761.7550845204},
			{1.4834045099188036e+06, 493601.5746113025},
			{1.4833357297108779e+06, 493541.00940386276},
			{1.4826047763662543e+06, 493029.5259000161},
			{1.4829688295305783e+06, 493670.35803855216},
			{1.4825073594267613e+06, 493824.4068265846},
			{1.4822584354074856e+06, 493467.6019529701},
			{1.4823521374449152e+06, 493373.69371803576},
			{1.4823017591575098e+06, 492774.78219286323},
			{1.4814090263284978e+06, 492613.85423916765},
			{1.4817139712095857e+06, 491974.8324801101},
			{1.4818621941453503e+06, 491937.3983294112},
			{1.4816394119691898e+06, 491653.9240453277},
			{1.4814470228577456e+06, 492067.0896462167},
			{1.4811763369844935e+06, 492418.89589642285},
			{1.48097632247853e+06, 492547.55837857875},
			{1.480825179683943e+06, 491995.88841311366},
			{1.481281502320152e+06, 491625.63183557376},
			{1.4812039532098256e+06, 491077.7678797943},
			{1.4809322793151957e+06, 490750.33011189377},
			{1.4805277457803218e+06, 491029.38994946814},
			{1.4804550584535669e+06, 490256.20510470925},
			{1.480333834437109e+06, 490242.6291641465},
			{1.480279331523746e+06, 490548.3182267682},
			{1.479651324322051e+06, 490385.44046459044},
			{1.4793320494508399e+06, 490410.45214434667},
			{1.4793058395195836e+06, 490699.31352586584},
			{1.4788380925288359e+06, 490682.5606722891},
			{1.4787103566179664e+06, 490418.70596601255},
			{1.4785484973459383e+06, 490442.09078120464},
			{1.4783978991454032e+06, 490773.3383581169},
			{1.4786234155770703e+06, 491487.2854573551},
			{1.4782952865096417e+06, 491555.7832998959},
			{1.4781825633377351e+06, 491702.41732288373},
			{1.4780095977379994e+06, 491780.1149444328},
			{1.4778444396400666e+06, 491497.28204983764},
			{1.4775042741840207e+06, 491382.28012224124},
			{1.4772535554591126e+06, 491557.1093685857},
			{1.4768926411704624e+06, 491947.12402993796},
			{1.477020666289286e+06, 492290.22271533683},
			{1.4765819640768075e+06, 492132.4311916258},
			{1.4763810751406292e+06, 492306.28899364016},
			{1.4760488577274696e+06, 492475.8853113185},
			{1.4762927747283545e+06, 491688.43566660566},
			{1.4762014613702658e+06, 491488.67382132943},
			{1.476040605454308e+06, 491467.04831022164},
			{1.475799766936047e+06, 491553.5270875974},
			{1.4757011705115002e+06, 491227.8070675763},
			{1.4759001321980765e+06, 491144.0655076177},
			{1.4760515779893522e+06, 490767.6971219265},
			{1.4760430489587265e+06, 490607.52650980925},
			{1.4758866212278325e+06, 490564.18304001016},
			{1.475314165760395e+06, 490695.95430685667},
			{1.475106234808346e+06, 490823.13952426665},
			{1.4745087573781915e+06, 490915.899570744},
			{1.4743405975612584e+06, 490771.1777329559},
			{1.4743256913003724e+06, 490758.39770739496},
			{1.4736361835146109e+06, 490454.58625425136},
			{1.473409952850581e+06, 490510.18176343327},
			{1.473315707380297e+06, 490445.6590872537},
			{1.4733566097051282e+06, 490205.0843307184},
			{1.4733058062323695e+06, 489968.3992344155},
			{1.473274073223655e+06, 489961.91445346555},
			{1.4731550741867726e+06, 489937.5977688892},
			{1.4727466862699357e+06, 490318.0756964608},
			{1.4726988128524967e+06, 490511.96617533086},
			{1.4725183067963298e+06, 490667.4482827986},
			{1.4723181117955304e+06, 490717.0775687547},
			{1.4719271196058546e+06, 490365.6763749119},
			{1.4717053437331838e+06, 490399.60155391396},
			{1.4710922983099048e+06, 490285.7918995706},
			{1.4710456337703918e+06, 490231.0116617601},
			{1.471032441254552e+06, 489809.6841667184},
			{1.4708870687674237e+06, 489712.1380470972},
			{1.4705452754227864e+06, 489766.87292718666},
			{1.4703401377307856e+06, 489476.1219974201},
			{1.470169097861035e+06, 489463.87195296894},
			{1.4699845731943746e+06, 489720.41495962284},
			{1.4697485887781268e+06, 489864.64346874226},
			{1.4694893691198924e+06, 489879.687749283},
			{1.4690576326171116e+06, 489565.4254929228},
			{1.4690002531989983e+06, 489470.6909808645},
			{1.4689092720417737e+06, 489320.2361659334},
			{1.4688470402876204e+06, 488855.0107416869},
			{1.4686366198646028e+06, 488427.4896099016},
			{1.4688061505481028e+06, 488122.61355113296},
			{1.468889696037191e+06, 487834.16642718366},
			{1.4688064449004924e+06, 487715.38919261104},
			{1.4685661602062772e+06, 487677.76816064067},
			{1.468243784475286e+06, 487759.20107388485},
			{1.467764047138399e+06, 487638.9206911057},
			{1.4675369098767499e+06, 487698.3607600848},
			{1.4674236031402189e+06, 487728.02330918226},
			{1.466685167350779e+06, 487498.6180434953},
			{1.4664387417675348e+06, 487369.3183257439},
			{1.4662161887107582e+06, 487041.255308006},
			{1.4659260402371949e+06, 486801.27764927957},
			{1.4652074088338655e+06, 486773.80956268066},
			{1.4640498329966979e+06, 486476.7634259412},
			{1.463732261188341e+06, 486005.0902220133},
			{1.4637446009120161e+06, 485781.36112374294},
			{1.4640648332307406e+06, 485303.38695600594},
			{1.4638865680206653e+06, 485040.9803799032},
			{1.4633864001959327e+06, 484735.90422364644},
			{1.462936540813999e+06, 484637.09371635254},
			{1.4627137808927868e+06, 484588.19593235827},
			{1.4623701928639782e+06, 484529.85771359026},
			{1.4621783169662738e+06, 484457.0367761089},
			{1.462067566236004e+06, 484310.1732148736},
			{1.4620216625769697e+06, 484210.38458813017},
			{1.462011449677075e+06, 484016.0309716093},
			{1.4621357450257535e+06, 483769.7572224355},
			{1.462619899246982e+06, 483257.09109123907},
			{1.462771511197294e+06, 482835.3882772389},
			{1.462682605645084e+06, 482172.65701337595},
			{1.4625532536841219e+06, 481954.1629802472},
			{1.4625368115786393e+06, 481668.0673391093},
			{1.462443614644922e+06, 481434.2844253895},
			{1.4620704778763247e+06, 480827.10951592657},
			{1.461893039383449e+06, 480723.3120597589},
			{1.461530249432324e+06, 480717.7118801193},
			{1.4611295304995924e+06, 480613.97258283803},
			{1.4606014602786617e+06, 480834.75347240415},
			{1.4602719293644626e+06, 480847.5920366739},
			{1.45952739210296e+06, 480685.594786966},
			{1.4594227733743184e+06, 480630.5148117769},
			{1.4590930216546902e+06, 480462.07285639533},
			{1.4589955010445858e+06, 480453.6721031364},
			{1.4588004599212464e+06, 480436.8745508272},
			{1.4586977098250075e+06, 480495.276425357},
			{1.457980051186656e+06, 480282.4458564436},
			{1.457913470199389e+06, 480635.86378017877},
			{1.4575636132113999e+06, 481566.74270888587},
			{1.4574063123543647e+06, 481956.0175800478},
			{1.4570083766143771e+06, 482596.85558409744},
			{1.4560837420264815e+06, 483247.10456620296},
			{1.4555608996550837e+06, 483503.5096104417},
			{1.4526178856135586e+06, 484290.0759860088},
			{1.4522250404723485e+06, 484312.76934220764},
			{1.4501802869087616e+06, 483944.48195257265},
			{1.449367156047405e+06, 483817.2888617366},
			{1.4489896081264068e+06, 483764.0772890359},
			{1.447447660718903e+06, 483544.9487750919},
			{1.44637337055102e+06, 483062.40602450696},
			{1.4474915398477863e+06, 482969.6070566174},
			{1.448050980241939e+06, 482272.5791228275},
			{1.4482956313857918e+06, 481171.2008006027},
			{1.4481659661931535e+06, 479098.7564667131},
			{1.4479438609368235e+06, 478150.8352477836},
			{1.4477581334876122e+06, 477358.51122354687},
			{1.4479918997891706e+06, 476376.1063693437},
			{1.4481051171701306e+06, 475900.3253616948},
			{1.4482596383693754e+06, 475250.9873808388},
			{1.4491345507151603e+06, 474352.41245804646},
			{1.4516642803091805e+06, 473413.58651924157},
			{1.4523968108618776e+06, 473141.949241318},
			{1.4536948902759864e+06, 472159.2614893695},
			{1.4560746038344048e+06, 472423.60332387825},
			{1.4573454371261653e+06, 471662.10281651927},
			{1.4578545692121629e+06, 471032.7153810454},
			{1.4580234293161875e+06, 470823.99777155404},
			{1.4580612057513366e+06, 470777.30645927973},
			{1.458415014813565e+06, 470340.0341492388},
			{1.458910476026571e+06, 469320.57969111134},
			{1.4589582928904828e+06, 469079.7612603645},
			{1.4591329047482868e+06, 468200.36725649395},
			{1.4592710427821833e+06, 467504.6630453472},
			{1.4594155964282441e+06, 466776.6454875228},
			{1.4592725862381225e+06, 465843.2462716306},
			{1.4591760085599448e+06, 465213.20569342846},
			{1.4608695506145998e+06, 465361.4291663072},
			{1.461310970543111e+06, 464659.87508977886},
			{1.4615304804943705e+06, 464311.0500728328},
			{1.4619798038857898e+06, 463597.1195005699},
			{1.463108701993522e+06, 462247.71007227997},
			{1.4633259088267148e+06, 462249.2382334816},
			{1.4636579566572385e+06, 462251.58696132747},
			{1.4643883189238808e+06, 461155.50953170477},
			{1.4644468464477577e+06, 460460.87303811027},
			{1.4643680880018612e+06, 460123.7621972844},
			{1.4643677688934663e+06, 460122.39642748353},
			{1.4643116663486983e+06, 459882.29433814064},
			{1.4642152336670985e+06, 459469.65785515594},
			{1.464675570581416e+06, 458013.7181730906},
			{1.4649938229108658e+06, 457352.6874904743},
			{1.4650576745417742e+06, 457220.0735555241},
			{1.465290709140662e+06, 456736.110682688},
			{1.4655306246868062e+06, 456739.4253584385},
			{1.4661240348255916e+06, 455898.43500621925},
			{1.4661281104970116e+06, 455017.331556035},
			{1.4655889496004407e+06, 453983.1832416893},
			{1.4653803477154304e+06, 453583.1810986682},
			{1.4652251884173919e+06, 453285.6972634096},
			{1.4631662109090993e+06, 450492.6491669499},
			{1.4629639479289083e+06, 450218.43788138096},
			{1.4621116445873966e+06, 449063.27575002436},
			{1.4619928118300394e+06, 448902.257802452},
			{1.4612193083334214e+06, 448509.7074632675},
			{1.4610330913610135e+06, 448415.22067538544},
			{1.460034202698861e+06, 447908.5000619359},
			{1.4594935755443515e+06, 447286.7156974945},
			{1.4583107366702533e+06, 445926.8539144458},
			{1.4568638513297404e+06, 444264.4374777252},
			{1.455683658629866e+06, 443937.1361535062},
			{1.4547350361950693e+06, 443407.8317919969},
			{1.4538885679533645e+06, 442680.0880293007},
			{1.4526092666052675e+06, 441580.6818065022},
			{1.452161541440017e+06, 439788.8059182419},
			{1.45199096297285e+06, 439106.5222522803},
			{1.4520512794470263e+06, 438709.35022516694},
			{1.452290775139987e+06, 437132.1800208013},
			{1.4523839753334473e+06, 436518.36147400853},
			{1.4517288775540867e+06, 435845.01994007156},
			{1.4512870996687184e+06, 435768.0378731842},
			{1.4505096473826405e+06, 434455.36308860086},
			{1.450269868330878e+06, 434050.64514433633},
			{1.449259911687537e+06, 432346.6458387207},
			{1.4492486899381522e+06, 432016.98656511074},
			{1.4492486872872624e+06, 432016.90871393576},
			{1.4492313836384434e+06, 431508.97266374837},
			{1.4488296192100616e+06, 430100.2647583698},
			{1.4486491595566073e+06, 429820.55868817616},
			{1.4486009584838245e+06, 429745.85377706465},
			{1.44855383983049e+06, 429672.82851971773},
			{1.4483084435034068e+06, 429498.22055873723},
			{1.4482808395574833e+06, 429016.6930794339},
			{1.4481764349851485e+06, 427197.9355389879},
			{1.4481887415736332e+06, 427190.64318643074},
			{1.4485867755284694e+06, 427006.35944374464},
			{1.4490401670847698e+06, 426862.15669694537},
			{1.4491503231446173e+06, 426871.7919603375},
			{1.4494938981549852e+06, 427027.81544931384},
			{1.449913024263948e+06, 427583.1452116939},
			{1.4504191139804402e+06, 427702.1472248586},
			{1.450803261379837e+06, 427558.2484511143},
			{1.4508689640067844e+06, 427435.78465424926},
			{1.4507665162321848e+06, 427221.93012319505},
			{1.4507631304804352e+06, 427125.45095841435},
			{1.4509035025784958e+06, 426989.07480682246},
			{1.4510385811181825e+06, 426962.2483316486},
			{1.4511683381133163e+06, 426981.6995397698},
			{1.451211196360518e+06, 426996.69141573936},
			{1.451488010884272e+06, 427282.86219137406},
			{1.4517660523367978e+06, 427217.24987002136},
			{1.451776411526986e+06, 427109.5024260451},
			{1.4517581009089153e+06, 426936.94411258807},
			{1.4520223160830585e+06, 426522.1858605559},
			{1.452124185514327e+06, 426442.53842960653},
			{1.4522232940822623e+06, 426444.2504633451},
			{1.4523855404286836e+06, 426540.7079291315},
			{1.4528012933065167e+06, 426567.9328287256},
			{1.4528887936375304e+06, 426523.6115191835},
			{1.4529425684702815e+06, 426401.48857187026},
			{1.4529481545818336e+06, 426367.69344565936},
			{1.4523171167652204e+06, 425996.04356450576},
			{1.4522904928852383e+06, 425935.14221251913},
			{1.4523270127871556e+06, 425821.4344746226},
			{1.453184614958119e+06, 425408.6164629635},
			{1.4534897277498485e+06, 425406.3083780954},
			{1.4542395297342495e+06, 425210.3329721884},
			{1.4549453785774733e+06, 424951.4020464696},
			{1.455325919924079e+06, 424887.3086856736},
			{1.4557293615005342e+06, 424894.81659969006},
			{1.455981171580184e+06, 425246.88689835015},
			{1.456476340142055e+06, 425170.88332068926},
			{1.456577158900043e+06, 425209.14848183823},
			{1.4567009392092112e+06, 425312.3496662666},
			{1.4569358899941738e+06, 425850.57420777285},
			{1.457096220710379e+06, 425920.4301998152},
			{1.4571661340439378e+06, 425891.83832050365},
			{1.4572606775526544e+06, 425727.84582598344},
			{1.4573801272088047e+06, 425703.4175319946},
			{1.4577139729931115e+06, 425788.1683100543},
			{1.4578892824479227e+06, 425653.70114223013},
			{1.4588229518115006e+06, 425362.5879936969},
			{1.4595412685799953e+06, 425457.6428552544},
			{1.459961522667704e+06, 425272.1396205878},
			{1.4599988728107736e+06, 425390.1487051755},
			{1.4601707273776948e+06, 425403.06142988935},
			{1.4606326379389535e+06, 425154.990205772},
			{1.4608143437922883e+06, 424687.61003257555},
			{1.4611003412162885e+06, 424356.21161545},
			{1.4612620325762534e+06, 424165.2852492694},
			{1.461316280776049e+06, 424023.74410387216},
			{1.4612501554356571e+06, 423687.39687901735},
			{1.4613233286136151e+06, 423477.337493979},
			{1.4616850390323813e+06, 423369.3063829024},
			{1.4617546875819236e+06, 422972.4308265063},
			{1.4616497199386754e+06, 422765.12247719767},
			{1.4616243065882747e+06, 422597.18671546486},
			{1.461759528396342e+06, 422578.0190405293},
			{1.4618891791042055e+06, 422722.6005068813},
			{1.462063083193074e+06, 422770.8738824255},
			{1.4628076311679767e+06, 422295.7242239953},
			{1.462858012219009e+06, 422267.6571962804},
			{1.4630917297823725e+06, 422095.98416357243},
			{1.4634481406179594e+06, 421671.79375231685},
			{1.4635172675102332e+06, 421642.5275801624},
			{1.4638569610748144e+06, 421728.3614000775},
			{1.4638709804525962e+06, 420960.1638398722},
			{1.464065364291989e+06, 420508.7187724706},
			{1.4646696443169783e+06, 419527.04149723623},
			{1.4653709359822469e+06, 419214.1227179035},
			{1.4658212929401235e+06, 419276.7602164991},
			{1.466221372555161e+06, 419307.6028132723},
			{1.4664062719602995e+06, 419194.9976386616},
			{1.4667932702831998e+06, 418769.0603182391},
			{1.4671097643377208e+06, 418605.9107653104},
			{1.467203851036e+06, 418577.9720384571},
			{1.4674878194644947e+06, 418541.9698934164},
			{1.4681828201047871e+06, 418056.5746273078},
			{1.4683049382144262e+06, 417654.8148900985},
			{1.4679814645500595e+06, 417466.30541886983},
			{1.4678818641770333e+06, 417326.6658580034},
			{1.4678891051572808e+06, 417188.5616525666},
			{1.4682282837297039e+06, 416884.80372149753},
			{1.4683689234194658e+06, 416851.118014951},
			{1.4684891392403408e+06, 416906.3220571954},
			{1.4687863528215003e+06, 417539.78387198783},
			{1.4694131506433515e+06, 417482.5948929862},
			{1.4695388229509534e+06, 417536.32123624225},
			{1.4695912846918604e+06, 417774.28981403634},
			{1.4697352663800453e+06, 417826.5174611932},
			{1.4698972584466187e+06, 417763.4935295319},
			{1.4700315939740662e+06, 417441.7387724904},
			{1.4701149389372235e+06, 417285.42752583325},
			{1.4704746679811191e+06, 416928.8306709734},
			{1.4706106548424468e+06, 417007.9377644366},
			{1.470780929754631e+06, 417287.6807137187},
			{1.4708501316009928e+06, 417327.42531357147},
			{1.4709735308743438e+06, 417264.42439078545},
			{1.4712993641653338e+06, 416963.1715393322},
			{1.4713868138016674e+06, 417040.17342281016},
			{1.4714982639108654e+06, 417266.6882432534},
			{1.4717509415674524e+06, 417418.3370721334},
			{1.4724478114668296e+06, 417461.56467838516},
			{1.4728628763831223e+06, 417675.0276127788},
			{1.4739601301759747e+06, 418055.28738930187},
			{1.4742419633896688e+06, 418303.6979327773},
			{1.4747140183189593e+06, 418210.76200840296},
			{1.4748733055287749e+06, 418250.82419689745},
			{1.4749443122689617e+06, 418319.46135115786},
			{1.4749997296633322e+06, 418630.5536399368},
			{1.4751211763897547e+06, 418869.6889435809},
			{1.4761677837442467e+06, 419634.217047908},
			{1.4763625742510771e+06, 419783.2493879221},
			{1.4765803519575112e+06, 420078.35932187206},
			{1.4768009214407871e+06, 420427.8521863126},
			{1.4769617277065935e+06, 420438.43675982056},
			{1.4771083878883312e+06, 420422.98135931307},
			{1.4772191995919063e+06, 420606.7751321983},
			{1.477586527601066e+06, 420956.92500093626},
			{1.4781662475202703e+06, 420939.43792745477},
			{1.4786796484978206e+06, 420713.18259491725},
			{1.4789034025774614e+06, 420562.17204094306},
			{1.4791259055190703e+06, 420506.4346832851},
			{1.4793094558426633e+06, 420541.02257773484},
			{1.4798944100683902e+06, 420869.06496150704},
			{1.4799568891184793e+06, 420992.8939066823},
			{1.4799144486108222e+06, 421087.5895409575},
			{1.479784419159282e+06, 421182.79026748094},
			{1.4795724516469468e+06, 421212.15995611844},
			{1.4792534008488616e+06, 421160.3085217935},
			{1.4791956236372956e+06, 421254.6026000208},
			{1.4796851583769608e+06, 421697.6619610518},
			{1.4802434976919864e+06, 421459.39497418184},
			{1.4803905438475963e+06, 421458.1021104928},
			{1.480606474003565e+06, 421561.3782569091},
			{1.4807405725798043e+06, 421712.6768413784},
			{1.4807860735177968e+06, 421882.1278040026},
			{1.4807639683120812e+06, 421978.47156301315},
			{1.4806164394778034e+06, 422134.64977673604},
			{1.4806903841606483e+06, 422366.7533543174},
			{1.4812521111969403e+06, 422415.9535729976},
			{1.4812583340993486e+06, 422975.7056555632},
			{1.4812926532581693e+06, 423014.7994574202},
			{1.48129725819751e+06, 423020.03297095734},
			{1.4816493521173208e+06, 423103.0248283243},
			{1.4820823620640857e+06, 423174.81685595214},
			{1.4821811676581067e+06, 423283.35372972133},
			{1.4822106655895934e+06, 423441.87724138016},
			{1.482154489086034e+06, 423590.74933818786},
			{1.4822323938077346e+06, 423852.1820560263},
			{1.4826799623479373e+06, 423943.6041196538},
			{1.4830883678769064e+06, 424404.2443806289},
			{1.483830994426025e+06, 424866.48944581964},
			{1.4840879362368644e+06, 424768.9791895077},
			{1.4844665845534771e+06, 424882.53080584103},
			{1.4847310533829054e+06, 425164.10885697784},
			{1.4849248213922933e+06, 425009.74906612217},
			{1.4851889377696994e+06, 423918.51677573624},
			{1.485455463284003e+06, 423753.1256928192},
			{1.48578088466977e+06, 423718.8296549233},
			{1.4858465460835956e+06, 423763.2194740712},
			{1.4858660510976496e+06, 423831.8780688899},
			{1.4857918185456656e+06, 424132.0668390085},
			{1.485855503529471e+06, 424274.3112704976},
			{1.486208183396446e+06, 424224.91265282757},
			{1.486345372539175e+06, 424309.814072541},
			{1.4865165266506448e+06, 424569.6830687681},
			{1.4864313816001213e+06, 424825.5797105518},
			{1.486517325353581e+06, 424918.7865590015},
			{1.4865234986319814e+06, 425279.5059884182},
			{1.4871160216973529e+06, 425796.0409014674},
			{1.487349766354781e+06, 425887.7080750471},
			{1.4875231289301682e+06, 425871.3714603617},
			{1.4876827241394222e+06, 425934.9953682026},
			{1.4878333228331062e+06, 426219.0943781091},
			{1.4879107974422574e+06, 426483.15099586535},
			{1.4883880639453435e+06, 426580.5808219578},
			{1.4886189019988663e+06, 426446.782805091},
			{1.4887868621335789e+06, 426418.9677258974},
			{1.4893905717072305e+06, 426767.1566198808},
			{1.4894648525079598e+06, 426870.23535633256},
			{1.4894874034070543e+06, 427221.7967011568},
			{1.4896824523834572e+06, 427431.7164416279},
			{1.4900795115210093e+06, 427430.0601669316},
			{1.4905645289672092e+06, 427679.07582871267},
			{1.4906789775966774e+06, 427793.1206186017},
			{1.49069250512024e+06, 427817.8330297985},
			{1.4907004897232226e+06, 427907.0009010871},
			{1.4906632707197915e+06, 427960.4390818673},
			{1.4906233347715903e+06, 428155.2475205984},
			{1.4908398449209325e+06, 428439.1610322984},
			{1.4908858999678239e+06, 428428.0217590393},
			{1.4909781766322944e+06, 428242.70129788},
			{1.4910787767711752e+06, 428216.8499702485},
			{1.491210564597957e+06, 428277.5775545763},
			{1.4915472267290095e+06, 428745.0558271961},
			{1.4919073197612844e+06, 428873.4477751175},
			{1.4921235194874592e+06, 429287.7496420419},
			{1.4924296093450268e+06, 429578.355010318},
			{1.4929482481915057e+06, 429700.5662231818},
			{1.493134290969852e+06, 429635.402633798},
			{1.4935094528476151e+06, 429803.0599626812},
			{1.493480238489119e+06, 429957.4345882028},
			{1.4935134378436052e+06, 430034.0384960314},
			{1.493637610879717e+06, 430132.04909989313},
			{1.4937498193716852e+06, 430137.348682982},
			{1.4938344563509824e+06, 430076.8137918539},
			{1.4948322717993408e+06, 429935.60658996785},
			{1.4953965569939967e+06, 430036.1680036015},
			{1.4960652059385842e+06, 430693.48330719885},
			{1.496096321521079e+06, 430780.0822036557},
			{1.4967414135863655e+06, 431013.55947634456},
			{1.4972390872548565e+06, 431061.65244258236},
			{1.4974141035512786e+06, 431501.0718094623},
			{1.4979241493274695e+06, 431802.54497235554},
			{1.4980283973818482e+06, 431834.32579640666},
			{1.4983635193669407e+06, 431745.4981103183},
			{1.4986789468906308e+06, 431740.5157339254},
			{1.4990060423565751e+06, 432154.34693395905},
			{1.499156625612052e+06, 432536.9888033437},
			{1.4990915560673648e+06, 432740.8711493559},
			{1.4992492591521353e+06, 432850.8949636658},
			{1.4993503292043405e+06, 432823.6715550529},
			{1.499591752544317e+06, 432776.4300304541},
			{1.4997809793231757e+06, 432833.46914738073},
			{1.500691756570198e+06, 433402.4048409059},
			{1.5007187873953655e+06, 433507.65282330196},
			{1.5006995160032075e+06, 433675.62621325726},
			{1.5007997362226192e+06, 433913.64585661096},
			{1.5012297092100433e+06, 433940.7073968132},
			{1.501399876162567e+06, 433890.5700381629},
			{1.5016075272541267e+06, 433961.20044705574},
			{1.5026065613479132e+06, 434311.203139972},
			{1.5027263374181024e+06, 434483.39121344825},
			{1.502619869710909e+06, 435064.60521428357},
			{1.5024226599213611e+06, 436141.71047058975},
			{1.5012730037804884e+06, 442142.4519886525},
			{1.501047265942054e+06, 443297.6893665544},
			{1.5009811909788682e+06, 443636.01616314455},
			{1.4991977032199842e+06, 451599.3476682531},
			{1.4990861156361708e+06, 452131.17745161563},
			{1.4985884067298793e+06, 454592.80926802993},
			{1.498562495247618e+06, 454722.89985642745},
			{1.498553072451787e+06, 454770.0614603649},
			{1.4984166575945204e+06, 455454.065223717},
			{1.4983309103725736e+06, 455883.87388967787},
			{1.4983194121806207e+06, 455941.47013141593},
			{1.4982519715725142e+06, 456279.56061196135},
			{1.4978862311292503e+06, 458083.8545154356},
			{1.497863783798829e+06, 458192.3736468156},
			{1.4973003604751846e+06, 461000.1034010789},
			{1.4957255815391757e+06, 460692.41248506046},
			{1.4953117303110175e+06, 460611.55134721444},
			{1.4952932983894525e+06, 460710.8322628287},
			{1.494834271673384e+06, 463150.02851971},
			{1.4946463051951865e+06, 464182.5167962439},
			{1.4944636010323744e+06, 465162.5769067777},
			{1.494427650515702e+06, 465353.0765259202},
			{1.4942546441714836e+06, 466269.2898783271},
			{1.4940788438042975e+06, 467200.2131362217},
			{1.49350974154079e+06, 470092.7316971246},
			{1.4952544529980184e+06, 470422.7194462321},
			{1.4951266419699374e+06, 471051.4676204824},
			{1.4950130928674387e+06, 471572.36837452836},
			{1.494674938264925e+06, 473433.7229746519},
			{1.4945849722487915e+06, 473962.4587213867},
			{1.4940751487781901e+06, 476347.0326700451},
			{1.49376963155033e+06, 477743.9307303684},
			{1.4933114450837765e+06, 479878.9552148843},
			{1.4932957288922362e+06, 479954.9367816526},
			{1.4931753184846044e+06, 480525.8601728917},
			{1.4930649534836991e+06, 481063.436557295},
			{1.4928219916905628e+06, 482245.268680959},
			{1.4926449467464231e+06, 483261.34009315475},
			{1.492314082012734e+06, 485060.6119606166},
			{1.4922262883926407e+06, 485531.45889933605},
			{1.492086406586467e+06, 486281.31874924665},
			{1.49161169792943e+06, 488404.9893000998},
			{1.4913807184547798e+06, 489372.8479932101},
			{1.4908325535095439e+06, 491863.0151656271},
			{1.4902934142170995e+06, 494389.19971794426}}})

	ps, err := Centroid(blockGroup)
	handle(err)
	in, err := Within(ps, blockGroup)
	handle(err)
	if !in {
		t.Fail()
	}
	drawShapes(blockGroup, county, ps, "testPointOnSurface.png")
}

func TestWithin(t *testing.T) {
	p := geom.Point{620858.7034230313, -1.3334340701764394e+06}
	b := geom.Polygon{
		[]geom.Point{
			{-2.758081092115788e+06, -2.1035219712004187e+06},
			{-2.7580810921157864e+06, 1.9603377468041454e+06},
			{2.6080741578387334e+06, 1.954523927465083e+06},
			{2.60226033849967e+06, -2.10352197120042e+06},
			{-2.758081092115788e+06, -2.1035219712004187e+06},
		},
	}
	// If the orientation is wrong, within won't give the correct answer
	err := FixOrientation(b)
	handle(err)
	in, err := Within(p, b)
	handle(err)
	if !in {
		t.Fail()
	}
}

func TestCentroid(t *testing.T) {
	shape := geom.Geom(geom.Polygon{
		{{0, 0}, {1, 0}, {2, 1}, {2, 2}, {1, 3}, {0, 3}, {-1, 2}, {-1, 1}, {0, 0}},
		{{0, 0.1}, {0.9, 2.7}, {1.9, 1.5}, {0.75, 0.1}, {0, 0.1}}})
	point, err := Centroid(shape)
	handle(err)
	t.Log(point)
	drawShapes(shape, nil, point, "centroid.png")
}

func TestInfiniteLoopBug2(t *testing.T) {
	subject := geom.Geom(geom.LineString{
		{1.427255375e+06, -2.3283064365386963e-10},
		{1.4271285e+06, 134.7111358642578}, {1.427109e+06, 178.30108642578125}})

	clipping := geom.Geom(geom.Polygon{
		{{1.416e+06, -12000}, {1.428e+06, -12000}, {1.428e+06, 0},
			{1.416e+06, 0}, {1.416e+06, -12000}}})

	isect, err := Construct(subject, clipping, INTERSECTION)
	handle(err)
	drawShapes(subject, clipping, isect, "infiniteLoopBug2.png")
}
func TestInfiniteLoopBug3(t *testing.T) {
	subject := geom.Geom(geom.Polygon{
		{geom.Point{X: 1.7714672107465276e+06, Y: -102506.68254093888},
			geom.Point{X: 1.7713768917571804e+06, Y: -102000.75485953009},
			geom.Point{X: 1.7717109214841307e+06, Y: -101912.19625031832}}})

	clipping := geom.Geom(geom.Polygon{
		{geom.Point{X: 1.7714593229229522e+06, Y: -102470.35230830211},
			//geom.Point{X: 1.7714672107465276e+06, Y: -102506.68254093888},
			geom.Point{X: 1.7714672107465276e+06, Y: -102506.68254093867},
			geom.Point{X: 1.771439738086082e+06, Y: -102512.92027456204}}})

	drawShapes(subject, clipping, nil, "infiniteLoopBug3.png")
	isect, err := Construct(subject, clipping, INTERSECTION)
	handle(err)
	drawShapes(subject, clipping, isect, "infiniteLoopBug3.png")
}

func TestInfiniteLoopBug4(t *testing.T) {
	subject := geom.Polygon{
		[]geom.Point{
			geom.Point{X: -1.8280000000000012e+06, Y: -492999.99999999953},
			geom.Point{X: -1.8289999999999995e+06, Y: -494000.0000000006},
			geom.Point{X: -1.828e+06, Y: -493999.9999999991},
			geom.Point{X: -1.8280000000000012e+06, Y: -492999.99999999953},
		},
	}

	clipping := geom.Polygon{
		[]geom.Point{
			geom.Point{X: -1.8280000000000005e+06, Y: -495999.99999999977},
			geom.Point{X: -1.8280000000000007e+06, Y: -492000.0000000014},
			geom.Point{X: -1.8240000000000007e+06, Y: -492000.0000000014},
			geom.Point{X: -1.8280000000000005e+06, Y: -495999.99999999977},
		},
	}

	drawShapes(subject, clipping, nil, "infiniteLoopBug4.png")
	isect, err := Construct(subject, clipping, INTERSECTION)
	handle(err)
	drawShapes(subject, clipping, isect, "infiniteLoopBug4.png")
}

func TestInfiniteLoopBug5(t *testing.T) {
	subject := geom.Polygon{
		[]geom.Point{
			geom.Point{X: -2.0199999999999988e+06, Y: -394999.99999999825},
			geom.Point{X: -2.0199999999999988e+06, Y: -392000.0000000009},
			geom.Point{X: -2.0240000000000012e+06, Y: -395999.9999999993},
			geom.Point{X: -2.0199999999999988e+06, Y: -394999.99999999825},
		},
	}

	clipping := geom.Polygon{
		[]geom.Point{
			geom.Point{X: -2.0199999999999988e+06, Y: -394999.99999999825},
			geom.Point{X: -2.020000000000001e+06, Y: -394000.0000000001},
			geom.Point{X: -2.0190000000000005e+06, Y: -394999.9999999997},
			geom.Point{X: -2.0199999999999988e+06, Y: -394999.99999999825},
		},
	}

	drawShapes(subject, clipping, nil, "infiniteLoopBug5.png")
	isect, err := Construct(subject, clipping, INTERSECTION)
	handle(err)
	drawShapes(subject, clipping, isect, "infiniteLoopBug5.png")
}

func TestInfiniteLoopBug6(t *testing.T) {
	subject := geom.Polygon{[]geom.Point{
		geom.Point{X: -47999.99999999992, Y: -23999.999999998756},
		geom.Point{X: 0, Y: -24000.00000000017},
		geom.Point{X: 0, Y: 24000.00000000017},
		geom.Point{X: -48000.00000000014, Y: 24000.00000000017},
		geom.Point{X: -47999.99999999992, Y: -23999.999999998756}}}

	clipping := geom.Polygon{[]geom.Point{
		geom.Point{X: -48000, Y: -24000},
		geom.Point{X: 0, Y: -24000},
		geom.Point{X: 0, Y: 24000},
		geom.Point{X: -48000, Y: 24000},
		geom.Point{X: -48000, Y: -24000}}}

	drawShapes(subject, clipping, nil, "infiniteLoopBug6.png")
	isect, err := Construct(subject, clipping, INTERSECTION)
	handle(err)
	drawShapes(subject, clipping, isect, "infiniteLoopBug6.png")
}

func drawShapes(a, b, c geom.Geom, filename string) {
	f, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	carto.DrawShapes(f,
		[]color.NRGBA{{0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}},
		[]color.NRGBA{{255, 0, 0, 127}, {0, 255, 0, 127},
			{0, 0, 0, 200}},
		1, 8, a, b, c)
	f.Close()
}

func drawLine(a, b, c geom.Geom, filename string) {
	f, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	carto.DrawShapes(f,
		[]color.NRGBA{{255, 0, 0, 150}, {0, 0, 0, 127}, {0, 0, 255, 100}},
		[]color.NRGBA{{255, 0, 0, 0}, {0, 255, 0, 127},
			{0, 0, 0, 0}},
		4, 0, a, b, c)
	f.Close()
}

func drawLines(a, b, c geom.Geom, filename string) {
	f, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	carto.DrawShapes(f,
		[]color.NRGBA{{255, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 255, 255}},
		[]color.NRGBA{{255, 0, 0, 0}, {0, 255, 0, 0},
			{0, 0, 0, 0}},
		4, 8, a, b, c)
	f.Close()
}

func init() {
	rand.Seed(time.Now().UTC().UnixNano())
}

func RandomPoly(maxWidth, maxHeight float64, vertCnt int) geom.Geom {
	var result geom.Polygon
	result = make([][]geom.Point, 1)
	result[0] = make([]geom.Point, vertCnt)
	for i := 0; i < vertCnt-1; i++ {
		result[0][i] = geom.Point{rand.Float64() * maxWidth,
			rand.Float64() * maxHeight}
	}
	result[0][vertCnt-1] = result[0][0]
	return geom.Geom(result)
}

// Test operations on random (likely self-intersecting) polygons.
// In output images, intersection is red, xor is green, and union
// is grey (all colors are partially transparent). There should
// be no overlapping green or red areas, and every green or
// red area should be covered in grey. There should also be
// no grey areas that do not overlap with green or red.
func TestRandom(t *testing.T) {
	for i := 0; i < 10; i++ {

		// Generate random subject and clip polygons ...
		numVerticies := 100
		subj := RandomPoly(640, 480, numVerticies)
		clip := RandomPoly(640, 480, numVerticies)
		//subj := Paths([]Path{Path([]*IntPoint{
		//	{76, 351},{460, 441},{136, 71},{76, 351}})})
		//clip:= Paths([]Path{Path([]*IntPoint{
		//	{17, 230},{325, 5},{475, 30},{17, 230}})})

		clipTypes := map[string]Op{"intersection": INTERSECTION,
			"union": UNION, "xor": XOR}
		areas := make(map[string]float64)
		solutions := make(map[string]geom.Geom)

		for clipType, ct := range clipTypes {
			s, err := Construct(subj, clip, ct)
			solutions[clipType] = s
			handle(err)
			areas[clipType] = Area(solutions[clipType])
		}
		drawShapes(solutions["intersection"], solutions["xor"],
			solutions["union"], fmt.Sprintf("random_%v.png", i))

		if different(areas["union"], areas["intersection"]+areas["xor"]) {
			t.Logf("%v\t%10.1f%10.1f\tFail", i, areas["union"],
				areas["intersection"]+areas["xor"])
			t.Fail()
		} else {
			t.Logf("%v\t%10.1f%10.1f\tPass", i, areas["union"],
				areas["intersection"]+areas["xor"])
		}
	}
}

func different(a, b float64) bool {
	if math.Abs(a-b)/b > 0.001 {
		return true
	} else {
		return false
	}
}

func handle(err error) {
	if err != nil {
		panic(err)
	}
}
